name: TCD.API

on:
  push:
    branches: ["main"]
    paths:
      - 'TheCollectorsDenAPI/**'
  pull_request:
    branches: ["main"]
    paths:
      - 'TheCollectorsDenAPI/**'

run-name: |
  [TCD.API] ${{ github.event.head_commit.message || format('PR #{0} - {1}', github.event.pull_request.number, github.event.pull_request.title) }}

jobs:
  test:
    runs-on: ubuntu-latest
    env:
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
        MAIL_HOST: ${{ secrets.MAIL_HOST }}
        MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: "23.0.1"
          distribution: "oracle"

      - name: Inject environment variables
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/testdb" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=testuser" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=testpassword" >> $GITHUB_ENV

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            nc -z localhost 5432 && echo "PostgreSQL is ready" && exit 0
            echo "Waiting for PostgreSQL..."
            sleep 3
          done
          echo "PostgreSQL did not start in time" && exit 1

      - name: Run Flyway migrations
        run: |
          mvn flyway:migrate -Dflyway.url=jdbc:postgresql://localhost:5432/testdb \
                             -Dflyway.user=testuser \
                             -Dflyway.password=testpassword \
                             --file TheCollectorsDenAPI/pom.xml

      - name: Build with Maven
        run: mvn -B package --file TheCollectorsDenAPI/pom.xml

      - name: Run tests with Maven
        run: mvn -B test --file TheCollectorsDenAPI/pom.xml
